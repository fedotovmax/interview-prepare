package main

import (
	"context"
	"fmt"
	"math/rand"
	"sync"
	"time"
)

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), time.Second)
	defer cancel()

	ch := make(chan int)

	d := rand.Intn(10)

	wg := &sync.WaitGroup{}

	wg.Add(2)
	go func() {
		defer wg.Done()
		for i := range 1000 {
			//нужно добавить select, чтобы выйти по ctx
			time.Sleep(time.Millisecond * time.Duration(d))
			select {
			case ch <- i:
			case <-ctx.Done():
				fmt.Println("Writer exit by timeout")
				return
			}
		}
		close(ch)
	}()

	go func() {
		defer wg.Done()
		for {
			select {
			case val, ok := <-ch:
				if !ok {
					fmt.Println("Channel closed, all data was readed")
					return
				}
				fmt.Println(val)
			case <-ctx.Done():
				fmt.Println("Duration was: ", d)
				return
			}
		}
	}()

	wg.Wait()
}
