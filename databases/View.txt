VIEW — это виртуальная таблица, которая сама по себе не хранит данные, а представляет результат SQL-запроса, сохранённого в базе.
Проще говоря — это как сохранённый SELECT, к которому можно обращаться как к обычной таблице.

CREATE VIEW active_users AS
SELECT id, name, last_login
FROM users
WHERE last_login > now() - interval '30 days';

использование:
SELECT * FROM active_users;

Зачем нужны VIEW
  - Упрощение запросов
    Можно завернуть сложный SQL с кучей JOIN-ов и условий во VIEW и потом работать с ним как с таблицей.

  - Повторное использование
    Не нужно копипастить один и тот же запрос в разных местах — используешь VIEW.

  - Безопасность и контроль доступа
    Можно дать пользователю доступ к VIEW, а не к исходной таблице. Таким образом он будет видеть только "срез" данных.

  - Абстракция
    Если структура таблиц изменится, можно подправить VIEW, а код, который его использует, останется прежним.


Важные нюансы:
  - Обычный VIEW всегда выполняет запрос заново при каждом обращении.
  - Если нужен "закэшированный результат", используют MATERIALIZED VIEW — он реально хранит данные,
  и его нужно обновлять (REFRESH MATERIALIZED VIEW).

CREATE MATERIALIZED VIEW user_posts_count AS
SELECT user_id, count(*) AS posts_count
FROM posts
GROUP BY user_id;

SELECT * FROM user_posts_count;

Обновление данных:

REFRESH MATERIALIZED VIEW user_posts_count;

Важные нюансы:
  - Нужно следить за актуальностью возвращаемых данных, т.к. они в кеше.