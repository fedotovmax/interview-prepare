1. Язык программирования Go

1.1 Что такое Map

Что может быть ключом?

Почему не гарантирован порядок обхода?

Что такое Bucket?

Что такое экстра bucket?

Что такое эвакуация данных?

Что такое коллизии?

Что такое sync.Map и когда его использовать?

Как проверить существование ключа в map?

Можно ли сравнивать две map в Go? Как правильно это сделать?

Какова сложность операций get, put, delete в map?

1.2 Что такое Slice

Как устроен изнутри? Что такое len и capacity?

Как работает append, с каким коэффициентом

Как слайс передается в функцию, по ссылке или по значению

Как работает функция copy

1.3 Go-рутины и каналы

Что такое Race Condition

Dead Lock

Что будет если написать в закрытый канал? Вообще рассказать как и когда возникает паника.

Почему go-рутины легковесные

Сравнение го-рутин и системных тредов

Что такое context switch

Что такое стек? Что такое куча?

Где аллоцируется (выделяется память) стек?

Как работает scheduler?

Что такое вытесняющие и кооперативные задачи в многозадачности

как работает конструкция select

как происходит закрытие канала

Что такое атомики в го?

Библиотека Sync – Mutex, RW Mutex, Sync Map. Зачем нужен Sync.Map если обычный MAP можно обернуть в Mutex


1.4 Что такое интерфейсы

1.5 Какие принципы ООП знаете? Какие из них и как реализуются в Go


2. Базы данных

Меня спрашивали про базы данных PostgreSQL и MongoDB.


Транзакции

ACID – что это за принципы такие и что значит каждая буква

Уровни изоляции

Транзакции

VIEW

Процедуры и функции

Индексы, что это и зачем. Что такое функция Explain. Составные индексы

Что такое первичный ключ, что такое вторичный (внешний) ключ, чем они отличаются. Для чего нужны

Нормализация, нормальные формы 1 и 2 нормальные формы.

Common table expression 

JOIN 

Подзапросы

3. Брокеры сообщений

Меня спрашивали про два брокера сообщений Kafka и RabbitMQ.


Consumer

Producer

Partition

Consumer Group

Offset

Commit

Topic


В чем отличие Kafka и RabbitMQ


4. Docker и Kubernetes


5. Сеть, интернет

HTTP / HTTPS. В чем отличие.

tcp/udp – транспортные протоколы

что такое Rest API – принципы проектирования

как работает маршрутизатор

в чем отличие MAC от IP, что это такое

Принципы OSI


6. Алгоритмы

Виды шифрования. Симметричное, Асимметричное, Хеш-функция

Как оценить сложность алгоиртма. Например, взять любой алгоритм, описать его, предложить способ оценки сложности. Предложить оптимизацию.


7. Архитектура


Микросервисы

Что такое идемпотентность?

Что такое консистентность данных?

Что такое SOLID, расскажите про каждую букву.

Что такое чистая архитектура.

Что такое инверсия зависимости. с какими библиотеками работали (uber X)


8. Паттерны проектирования

паттерны микросервисные - transactional outbox

И под конец 2 лайфхака, которые помогают мне проходить тех. собес.

1 — если меня спросили про что-то, что я хорошо знаю, я отвечаю на вопрос интервьюера, но потом не останавливаюсь в ожидании следующего вопроса, а начинаю идти в ширь и в глубь. Рассказываю про связанные технологии, рассказываю про примеры использования. Про нюансы. Если я сталкивался с проблемами в применении технологии, и как-то их решал / преодолевал — то тоже обязательно рассказываю про это.

Это очень важно делать! Так вы произведете хорошее впечатление! И компенсируете если на какой-то из вопросов ответили неправильно или неточно

2 — что делать, если вам задали вопрос, на который вы не знаете ответ?Лучшее что можно сделать — ответить на смежный вопрос, на который вы знаете ответ, или про который вы хоть что-то знаете.
Но если вас всё равно наводят на ту тему, в которой вы не сильны — для начала четко скажите, что не помните, и можете описать тему на бытовом пользовательском уровне. Чего не надо делать — не надо угадывать, фантазировать и изобретать. Лучше не дать никакого ответа чем дать неправильный ответ.