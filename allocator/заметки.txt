1.
Стек памяти в Go — это область памяти для динамического выделения данных, где располагаются локальные переменные, аргументы функций и временные данные, 
которые автоматически удаляются после завершения функции. В отличие от кучи, стек используется для быстрого выделения и освобождения памяти, при этом в Go стек изначально выделяется для горутин, а при его переполнении создается новый, более крупный стек, который может быть как в стековой области, так и в куче. 

Основные характеристики стека памяти в Go: 
  - Статическое распределение, память выделяется и освобождается во время выполнения программы.
  - LIFO (Last-In, First-Out) последний добавленный элемент (например, вызов функции) является первым, который извлекается при завершении.
  - Локальные переменные и аргументы, в стеке хранятся переменные, которые определены внутри функции, и аргументы, передаваемые ей.
  - Автоматическое освобождение, после завершения выполнения функции вся память, выделенная для ее локальных данных, автоматически освобождается.

Стек vs. Куча:
  - Скорость, стек быстрее и проще в управлении, чем куча, так как выделение и освобождение памяти выполняется очень быстро. 
  - Назначение, стек подходит для временных данных и локальных переменных, а куча используется для данных, которые должны сохраняться дольше,
    например, для объектов, созданных с помощью оператора new() или для больших структур данных.

2.

В Golang куча (heap) — это область памяти для динамически выделяемых данных, которые могут существовать дольше, чем одна функция,
и управляются автоматически сборщиком мусора (GC). В отличие от стека, куча используется для больших объемов данных или когда время жизни переменной не привязано к вызову функции. Память в куче выделяется для объектов, созданных с помощью оператора new или для глобальных переменных. 

3. Аллокатор

Объекты в стеке:
  Когда вы объявляете локальную переменную в функции (например, var x int), она размещается в стеке.
Передача указателя:
  Если вы передаете указатель на локальную переменную (&x) в другую функцию, в стеке вызываемой функции создается копия этого указателя. Сам объект x при этом остается в стеке исходной функции.
Возврат указателя:
  Когда вы возвращаете указатель на локальную переменную (return &x), компилятор Go распознает этот паттерн и автоматически перемещает объект x из стека в кучу. Это сделано для того, чтобы объект остался доступным и после завершения работы вызываемой функции, а сборщик мусора позаботится об управлении его памятью в дальнейшем.
Объекты в куче (с использованием new или make):
  Если вы хотите, чтобы объект изначально находился в куче и был долгоживущим, используйте new или make. Например, ptr := new(MyStruct)
  или ptr := make([]int, 5). В этом случае указатель ptr будет содержать адрес объекта из кучи.
